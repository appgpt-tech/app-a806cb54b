//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { ClipsEntity } from './db/Clips.entity';
import { PlayersEntity } from './db/Players.entity';
import { TeamsEntity } from './db/Teams.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      ClipsEntity,
      PlayersEntity,
      TeamsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Clips: [
        {
          Title: 'Championship Final Play',
          URL: 'https://example.com/championship-final-play.mp4',
          Analysis:
            'In the final moments, player #23 from the Eagles makes a surprising left flank move, bypassing two defenders and scoring the winning goal.',
        },
        {
          Title: 'Underdog Victory',
          URL: 'https://example.com/underdog-victory.mp4',
          Analysis:
            'The underdog team executes a perfect counter-attack strategy, with player #11 making a critical pass that leads to a goal against the favorites.',
        },
        {
          Title: 'Defensive Masterclass',
          URL: 'https://example.com/defensive-masterclass.mp4',
          Analysis:
            "Team A's defense, especially player #5, shows exceptional skill in blocking and tackling, preventing Team B from scoring throughout the game.",
        },
        {
          Title: 'Midfield Dominance',
          URL: 'https://example.com/midfield-dominance.mp4',
          Analysis:
            "The midfielders of the Hawks, particularly player #8, control the game's pace, creating numerous opportunities and dominating possession.",
        },
        {
          Title: "Goalkeeper's Best Saves",
          URL: 'https://example.com/goalkeepers-best-saves.mp4',
          Analysis:
            "The compilation highlights the goalkeeper's agility and reflexes, showcasing top saves that kept the team in contention.",
        },
      ],
      Players: [
        { Name: 'John Doe', SharedWith: 'Team A, Team B' },
        { Name: 'Jane Smith', SharedWith: 'Team C' },
        { Name: 'Michael Brown', SharedWith: 'Team D, Team E' },
        { Name: 'Emily White', SharedWith: 'Team A, Team C' },
        { Name: 'Alex Johnson', SharedWith: 'Team B, Team D' },
      ],
      Teams: [
        { Name: 'Hawks' },
        { Name: 'Eagles' },
        { Name: 'Falcons' },
        { Name: 'Lions' },
        { Name: 'Tigers' },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('ClipsEntity', data.Clips);
      await this.SeedResource('PlayersEntity', data.Players);
      await this.SeedResource('TeamsEntity', data.Teams);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
